diff --git a/lib/data/helpers/http_client_provider.dart b/lib/data/helpers/http_client_provider.dart
new file mode 100644
index 0000000..f6b64ac
--- /dev/null
+++ b/lib/data/helpers/http_client_provider.dart
@@ -0,0 +1,31 @@
+import 'dart:io';
+import 'package:flutter/services.dart';
+import 'package:http/http.dart' as http;
+import 'package:http/io_client.dart';
+
+/// Создает глобальный экземпляр HTTP-клиента, который доверяет
+/// кастомному сертификату, встроенному в приложение.
+class HttpClientProvider {
+  static http.Client? _client;
+
+  static Future<http.Client> getClient() async {
+    if (_client == null) {
+      // Загружаем наш корневой сертификат из ассетов
+      final ByteData certData = await rootBundle.load('assets/certs/isrgrootx1.pem');
+
+      // Создаем SecurityContext, который будет использоваться для проверки
+      final SecurityContext securityContext = SecurityContext(withTrustedRoots: false);
+      securityContext.setTrustedCertificatesBytes(certData.buffer.asUint8List());
+
+      // Создаем HttpClient из dart:io с нашим SecurityContext
+      final HttpClient httpClient = HttpClient(context: securityContext);
+
+      // Отключаем стандартную проверку, так как мы предоставили свой собственный
+      // доверенный сертификат.
+      httpClient.badCertificateCallback =
+          (X509Certificate cert, String host, int port) => false;
+
+      // Создаем клиент пакета http, который будет использовать наш HttpClient
+      _client = IOClient(httpClient);
+    }
+    return _client!;
+  }
+}
diff --git a/lib/main.dart b/lib/main.dart
index 6e61f25..b0c791d 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,7 +1,7 @@
 import 'package:flutter/material.dart';
 import 'package:flutter/services.dart';
-import 'package:http/http.dart' as http;
 import 'package:poteu/app/services/active_regulation_service.dart';
+import 'package:poteu/data/helpers/http_client_provider.dart';
 import 'package:poteu/app/services/user_id_service.dart';
 import 'package:poteu/config.dart';
 import 'package:poteu/data/helpers/duckdb_provider.dart';
@@ -165,8 +165,11 @@
       final notesRepository = DataNotesRepository();
       final dataRegulationRepository = DataRegulationRepository();
       final userIdService = UserIdService();
-      final httpClient = http.Client();
-      final subscriptionRepository =
-          DataSubscriptionRepository(httpClient, userIdService);
+      
+      // === СОЗДАЕМ КАСТОМНЫЙ КЛИЕНТ ===
+      // Создаем клиент один раз и используем его во всем приложении
+      final httpClient = await HttpClientProvider.getClient();
+      // ===================================
+      final subscriptionRepository = DataSubscriptionRepository(httpClient, userIdService);
 
       final migrationService = MigrationService(
         staticRepo: regulationRepository,
diff --git a/pubspec.yaml b/pubspec.yaml
index 0c265fc..cae4d82 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -87,6 +87,7 @@
     - assets/pteep/data/
     - assets/fz116/data/
     - assets/fire_reg/data/
+    - assets/certs/isrgrootx1.pem
   fonts:
     - family: Yandex
       fonts: