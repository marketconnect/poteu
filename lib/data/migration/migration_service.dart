// lib/data/migration/migration_service.dart

import 'package:path/path.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sqflite/sqflite.dart' as old_db; // Keep for reading old db
import 'package:poteu/data/repositories/data_regulation_repository.dart';
import 'package:poteu/data/repositories/static_regulation_repository.dart';
import 'package:poteu/domain/entities/paragraph.dart';
import 'dart:developer' as dev;

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã SQLite.
// –ü–æ–ª—è –Ω–∞–∑–≤–∞–Ω—ã –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ.
class OldEditedParagraph {
  final int? id;
  final int paragraphId;
  final int chapterId;
  final int lastTouched;
  final int edited;
  final String text;

  OldEditedParagraph({
    this.id,
    required this.paragraphId,
    required this.chapterId,
    required this.lastTouched,
    required this.edited,
    required this.text,
  });

  factory OldEditedParagraph.fromJson(Map<String, dynamic> json) {
    return OldEditedParagraph(
      id: json['_id'] as int?,
      paragraphId: json['_paragraphId'] as int,
      chapterId: json['_chapterId'] as int,
      lastTouched: json['lastTouched'] as int,
      edited: json['edited'] as int,
      text: json['text'] as String,
    );
  }
}

class MigrationService {
  // final StaticRegulationRepository _staticRepo;
  final DataRegulationRepository _dataRepo; // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö

  MigrationService({
    required StaticRegulationRepository staticRepo,
    required DataRegulationRepository dataRepo, // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
  }) :
        // _staticRepo = staticRepo,
        _dataRepo = dataRepo;

  Future<void> migrateIfNeeded() async {
    const String migrationFlagKey = 'sqlite_migration_v2_completed';
    final prefs = await SharedPreferences.getInstance();

    if (prefs.getBool(migrationFlagKey) ?? false) {
      dev.log('[MIGRATION_LOG] –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.');
      return;
    }

    dev.log('[MIGRATION_LOG] üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite...');

    try {
      final oldDbPath = join(await old_db.getDatabasesPath(), 'paragraphs.db');
      dev.log('[MIGRATION_LOG] ‚ÑπÔ∏è –ü—É—Ç—å –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: $oldDbPath');

      if (!await old_db.databaseExists(oldDbPath)) {
        dev.log(
            '[MIGRATION_LOG] üü° –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
        await prefs.setBool(migrationFlagKey, true);
        return;
      }

      final db = await old_db.openDatabase(oldDbPath);
      final List<Map<String, dynamic>> oldParagraphsJson =
          await db.query('paragraphs');
      await db.close();

      if (oldParagraphsJson.isEmpty) {
        dev.log(
            '[MIGRATION_LOG] üü° –í —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.');
        await prefs.setBool(migrationFlagKey, true);
        return;
      }

      dev.log(
          '[MIGRATION_LOG] üîç –ù–∞–π–¥–µ–Ω–æ ${oldParagraphsJson.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.');

      for (final oldDataJson in oldParagraphsJson) {
        final oldParagraph = OldEditedParagraph.fromJson(oldDataJson);

        dev.log(
            '[MIGRATION_LOG] --- –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ ID: ${oldParagraph.paragraphId}');
        dev.log('[MIGRATION_LOG] --- –°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${oldParagraph.text}');

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Paragraph, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        // –ù–∞–º –≤–∞–∂–Ω—ã —Ç–æ–ª—å–∫–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        final tempParagraph = Paragraph(
          id: oldParagraph.paragraphId,
          originalId: oldParagraph.paragraphId,
          chapterId: oldParagraph.chapterId,
          num: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
          content: '', // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω
        );

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        await _dataRepo.saveEditedParagraph(
          oldParagraph.paragraphId, // ID –¥–ª—è –ø–æ–∏—Å–∫–∞
          oldParagraph.text, // –ö–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
          tempParagraph, // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
        );

        dev.log(
            '[MIGRATION_LOG] --- –ó–∞–ø–∏—Å—å –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ ${oldParagraph.paragraphId} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
      }

      await prefs.setBool(migrationFlagKey, true);
      dev.log('[MIGRATION_LOG] ‚úÖ‚úÖ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (e, stackTrace) {
      dev.log('[MIGRATION_LOG] ‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: $e');
      dev.log(stackTrace.toString());
    }
  }
}
