// lib/data/migration/migration_service.dart

import 'package:html/parser.dart';
import 'package:path/path.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sqflite/sqflite.dart' as old_db;
import 'package:poteu/data/repositories/data_regulation_repository.dart';
import 'package:poteu/data/repositories/static_regulation_repository.dart';

import 'package:poteu/domain/entities/paragraph.dart';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
import '../../app/utils/id_obfuscator.dart';

// –ö–ª–∞—Å—Å OldEditedParagraph –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class OldEditedParagraph {
  // ... (–∫–æ–¥ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  final int? id;
  final int paragraphId;
  final int chapterId;
  final int lastTouched;
  final int edited;
  final String text;

  OldEditedParagraph({
    this.id,
    required this.paragraphId,
    required this.chapterId,
    required this.lastTouched,
    required this.edited,
    required this.text,
  });

  factory OldEditedParagraph.fromJson(Map<String, dynamic> json) {
    return OldEditedParagraph(
      id: json['_id'] as int?,
      paragraphId: json['_paragraphId'] as int,
      chapterId: json['_chapterId'] as int,
      lastTouched: json['lastTouched'] as int,
      edited: json['edited'] as int,
      text: json['text'] as String,
    );
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ "–≥—Ä—è–∑–Ω–æ–≥–æ" HTML –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
String cleanHtmlContent(String htmlString) {
  final document = parse(htmlString);
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏ <a>
  document.querySelectorAll('a').forEach((element) {
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (element.nodes.isNotEmpty) {
      element.replaceWith(element.nodes.first);
    } else {
      // –ï—Å–ª–∏ —Ç–µ–≥ –ø—É—Å—Ç–æ–π (<a></a>), –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
      element.remove();
    }
  });
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–æ—á–∏—â–µ–Ω–Ω—ã–π" HTML, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (<u>, <span>)
  return document.body?.innerHtml ?? document.body?.text ?? '';
}

class MigrationService {
  final DataRegulationRepository _dataRepo;

  MigrationService({
    required StaticRegulationRepository staticRepo,
    required DataRegulationRepository dataRepo,
  }) : _dataRepo = dataRepo;

  Future<void> migrateIfNeeded() async {
    // –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –∫–ª—é—á, —á—Ç–æ–±—ã –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const String migrationFlagKey = 'sqlite_migration_v4_id_obfuscation_fix';
    final prefs = await SharedPreferences.getInstance();

    if (prefs.getBool(migrationFlagKey) ?? false) {
      print('[MIGRATION_LOG] –ú–∏–≥—Ä–∞—Ü–∏—è v4 —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.');
      return;
    }

    print(
        '[MIGRATION_LOG] üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite (v4 —Å –æ–±—Ñ—É—Å–∫–∞—Ü–∏–µ–π ID)...');

    try {
      final oldDbPath = join(await old_db.getDatabasesPath(), 'paragraphs.db');
      print('[MIGRATION_LOG] ‚ÑπÔ∏è –ü—É—Ç—å –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ: $oldDbPath');

      if (!await old_db.databaseExists(oldDbPath)) {
        print(
            '[MIGRATION_LOG] üü° –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
        await prefs.setBool(migrationFlagKey, true);
        return;
      }

      final db = await old_db.openDatabase(oldDbPath);
      final List<Map<String, dynamic>> oldParagraphsJson =
          await db.query('paragraphs');
      await db.close();

      if (oldParagraphsJson.isEmpty) {
        print(
            '[MIGRATION_LOG] üü° –í —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.');
        await prefs.setBool(migrationFlagKey, true);
        return;
      }

      print(
          '[MIGRATION_LOG] üîç –ù–∞–π–¥–µ–Ω–æ ${oldParagraphsJson.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.');

      for (final oldDataJson in oldParagraphsJson) {
        final oldParagraph = OldEditedParagraph.fromJson(oldDataJson);

        // === –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ñ—É—Å–∫–∞—Ü–∏—è ID ===
        final newParagraphId = confuseId(oldParagraph.paragraphId);

        // === –í–¢–û–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ HTML ===
        final cleanedContent = cleanHtmlContent(oldParagraph.text);

        print(
            '[MIGRATION_LOG] --- –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ: —Å—Ç–∞—Ä—ã–π ID ${oldParagraph.paragraphId} -> –Ω–æ–≤—ã–π ID $newParagraphId');
        print('[MIGRATION_LOG] --- –°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${oldParagraph.text}');
        print('[MIGRATION_LOG] --- –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: $cleanedContent');

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Paragraph, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω –¥–ª—è –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        // –í–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –Ω–µ–≥–æ –Ω–æ–≤—ã–π, –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID.
        final tempParagraph = Paragraph(
          id: newParagraphId,
          originalId:
              newParagraphId, // –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ id –∏ originalId —Å–æ–≤–ø–∞–¥–∞—é—Ç
          chapterId: oldParagraph.chapterId,
          num: 0,
          content: '',
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π ID –∫–∞–∫ –∫–ª—é—á (original_id)
        await _dataRepo.saveParagraphEditByOriginalId(
          newParagraphId, // –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
          cleanedContent, // –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
          tempParagraph,
        );

        print(
            '[MIGRATION_LOG] --- –ó–∞–ø–∏—Å—å –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ $newParagraphId —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DuckDB, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å,
      // —á—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏, –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –¥–∏—Å–∫.
      // –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ä—è–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

      await prefs.setBool(migrationFlagKey, true);
      print('[MIGRATION_LOG] ‚úÖ‚úÖ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è (v4) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (e, stackTrace) {
      print('[MIGRATION_LOG] ‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: $e');
      print(stackTrace.toString());
    }
  }
}
