import 'package:poteu/config.dart';

import 'duckdb_provider.dart';
import '../repositories/static_regulation_repository.dart';
import 'dart:developer' as dev;

/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î
class DatabasePerformanceTest {
  static Future<void> runPerformanceTest() async {
    dev.log('üöÄ Starting database performance test...');

    final stopwatch = Stopwatch()..start();

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ë–î
      await DuckDBProvider.instance.initialize();
      dev.log('‚úÖ Database initialized in ${stopwatch.elapsedMilliseconds}ms');

      final repository = StaticRegulationRepository();

      // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
      stopwatch.reset();
      const testRegulationId = 1;
      final chapterList = await repository.getChapterList(testRegulationId);
      dev.log(
          'üìö Chapter list loaded in ${stopwatch.elapsedMilliseconds}ms (${chapterList.length} chapters)');

      // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–¥–Ω–æ–π –≥–ª–∞–≤—ã
      if (chapterList.isNotEmpty) {
        stopwatch.reset();
        final chapterContent = await repository.getChapterContent(
            testRegulationId, chapterList.first.id);
        dev.log(
            'üìñ Chapter content loaded in ${stopwatch.elapsedMilliseconds}ms (${chapterContent.paragraphs.length} paragraphs)');
      }

      // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –≤ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏
      stopwatch.reset();
      final searchResults = await repository.searchInRegulation(
        regulationId: AppConfig.instance.regulationId,
        query: '–æ–±—â–∏–µ',
      );
      dev.log(
          'üîç Search completed in ${stopwatch.elapsedMilliseconds}ms (${searchResults.length} results)');

      dev.log('‚úÖ All performance tests completed successfully!');
    } catch (e) {
      dev.log('‚ùå Performance test failed: $e');
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await DuckDBProvider.instance.dispose();
    }
  }
}
