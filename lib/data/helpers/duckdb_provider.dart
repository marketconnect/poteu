import 'dart:io';
import 'package:flutter/services.dart';
import 'package:dart_duckdb/dart_duckdb.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:developer' as dev;

import 'package:poteu/config.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö DuckDB
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
class DuckDBProvider {
  static DuckDBProvider? _instance;
  static Database? _database;
  static Connection? _connection;
  static bool _isInitialized = false;

  DuckDBProvider._();

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  static DuckDBProvider get instance {
    _instance ??= DuckDBProvider._();
    return _instance!;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  Future<void> initialize() async {
    if (_isInitialized) {
      return;
    }

    try {
      // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ assets
      final data = await rootBundle.load(AppConfig.instance.databasePath);
      final dir = await getApplicationDocumentsDirectory();
      final flavorName = AppConfig.instance.flavorName;
      final localDbPath = '${dir.path}/${flavorName}_regulations.duckdb';
      final file = File(localDbPath);

      if (!await file.exists()) {
        await file.writeAsBytes(data.buffer.asUint8List());
      }

      // 2. –û—Ç–∫—Ä—ã—Ç–∏–µ –ë–î
      _database = await duckdb.open(file.path);
      _connection = await duckdb.connect(_database!);

      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await _connection!.query('''
        CREATE TABLE IF NOT EXISTS user_paragraph_edits (
          original_id INTEGER PRIMARY KEY,
          content TEXT,
          note TEXT,
          updated_at TIMESTAMP
        );
      ''');

      // Add change_date column to rules table if it doesn't exist for version sync
      await _connection!
          .query('ALTER TABLE rules ADD COLUMN IF NOT EXISTS change_date TEXT;');

      _isInitialized = true;
      dev.log('üóÑÔ∏è DuckDB initialized successfully');
    } catch (e) {
      dev.log('‚ùå Error initializing DuckDB: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  Future<Connection> get connection async {
    if (!_isInitialized) {
      await initialize();
    }

    if (_connection == null) {
      throw Exception('Database connection is not available');
    }

    return _connection!;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  bool get isInitialized => _isInitialized;

  /// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    try {
      if (_connection != null) {
        await _connection!.dispose();
        _connection = null;
      }

      if (_database != null) {
        await _database!.dispose();
        _database = null;
      }

      _isInitialized = false;
      dev.log('üóÑÔ∏è DuckDB disposed successfully');
    } catch (e) {
      dev.log('‚ùå Error disposing DuckDB: $e');
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  Future<ResultSet> executeQuery(String query) async {
    final conn = await connection;
    return await conn.query(query);
  }

  Future<void> forceCheckpoint() async {
    if (!_isInitialized || _connection == null) {
      return;
    }
    try {
      await _connection!.query('CHECKPOINT;');
      dev.log('üóÑÔ∏è DuckDB CHECKPOINT successful');
    } catch (e) {
      dev.log('‚ùå Error during DuckDB CHECKPOINT: $e');
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  Future<T> executeTransaction<T>(
      Future<T> Function(Connection) transaction) async {
    final conn = await connection;
    return await transaction(conn);
  }
}
