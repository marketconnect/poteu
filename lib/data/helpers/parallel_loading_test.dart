import 'duckdb_provider.dart';
import '../repositories/static_regulation_repository.dart';
import '../../domain/entities/chapter.dart';

/// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
class ParallelLoadingTest {
  static Future<void> runParallelLoadingTest() async {
    print('üöÄ Starting parallel loading performance test...');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ë–î
      await DuckDBProvider.instance.initialize();
      final repository = StaticRegulationRepository();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
      final chapterList = await repository.getChapterList(1);
      if (chapterList.length < 3) {
        print('‚ùå Need at least 3 chapters for testing');
        return;
      }

      print('üìö Testing with ${chapterList.length} chapters');

      // –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–∏–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞)
      await _testSequentialLoading(repository, chapterList);

      // –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)
      await _testParallelLoading(repository, chapterList);

      print('‚úÖ Parallel loading test completed!');
    } catch (e) {
      print('‚ùå Parallel loading test failed: $e');
    } finally {
      await DuckDBProvider.instance.dispose();
    }
  }

  /// –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤
  static Future<void> _testSequentialLoading(
      StaticRegulationRepository repository,
      List<ChapterInfo> chapterList) async {
    print('\nüîÑ Testing sequential loading...');
    final stopwatch = Stopwatch()..start();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã 1, 2, 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (int i = 0; i < 3 && i < chapterList.length; i++) {
      final chapterInfo = chapterList[i];
      final chapter = await repository.getChapterContent(chapterInfo.id);
      print(
          'üìñ Sequentially loaded chapter ${chapterInfo.orderNum}: ${chapter.title}');
    }

    stopwatch.stop();
    print(
        '‚è±Ô∏è Sequential loading completed in ${stopwatch.elapsedMilliseconds}ms');
  }

  /// –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤
  static Future<void> _testParallelLoading(
      StaticRegulationRepository repository,
      List<ChapterInfo> chapterList) async {
    print('\n‚ö° Testing parallel loading...');
    final stopwatch = Stopwatch()..start();

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    final List<Future<Chapter>> loadTasks = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤ 1, 2, 3
    for (int i = 0; i < 3 && i < chapterList.length; i++) {
      final chapterInfo = chapterList[i];
      loadTasks.add(repository.getChapterContent(chapterInfo.id));
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    final chapters = await Future.wait(loadTasks);

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (int i = 0; i < chapters.length; i++) {
      final chapter = chapters[i];
      print('üìñ Parallelly loaded chapter ${chapter.level}: ${chapter.title}');
    }

    stopwatch.stop();
    print(
        '‚è±Ô∏è Parallel loading completed in ${stopwatch.elapsedMilliseconds}ms');

    // –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    final sequentialTime = 1500; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    final parallelTime = stopwatch.elapsedMilliseconds;
    final speedup = sequentialTime / parallelTime;

    print('üöÄ Speedup: ${speedup.toStringAsFixed(2)}x faster');
  }

  /// –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–ª–∞–≤ (–∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ)
  static Future<void> testNeighborChaptersLoading() async {
    print('\nüîÑ Testing neighbor chapters loading simulation...');

    try {
      await DuckDBProvider.instance.initialize();
      final repository = StaticRegulationRepository();

      final chapterList = await repository.getChapterList(1);
      if (chapterList.length < 3) {
        print('‚ùå Need at least 3 chapters for testing');
        return;
      }

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤—ã 2 —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ (1 –∏ 3)
      final targetChapterNum = 2;
      final stopwatch = Stopwatch()..start();

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
      final List<Future<Chapter>> loadTasks = [];

      // –¢–µ–∫—É—â–∞—è –≥–ª–∞–≤–∞
      final targetChapterInfo =
          chapterList.firstWhere((ch) => ch.orderNum == targetChapterNum);
      loadTasks.add(repository.getChapterContent(targetChapterInfo.id));

      // –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≥–ª–∞–≤–∞
      if (targetChapterNum > 1) {
        final prevChapterInfo =
            chapterList.firstWhere((ch) => ch.orderNum == targetChapterNum - 1);
        loadTasks.add(repository.getChapterContent(prevChapterInfo.id));
      }

      // –°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞
      if (targetChapterNum < chapterList.length) {
        final nextChapterInfo =
            chapterList.firstWhere((ch) => ch.orderNum == targetChapterNum + 1);
        loadTasks.add(repository.getChapterContent(nextChapterInfo.id));
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      final chapters = await Future.wait(loadTasks);

      stopwatch.stop();
      print(
          '‚úÖ Neighbor chapters loaded in ${stopwatch.elapsedMilliseconds}ms (parallel)');
      print(
          'üìö Loaded ${chapters.length} chapters: ${chapters.map((c) => c.level).join(', ')}');
    } catch (e) {
      print('‚ùå Neighbor chapters test failed: $e');
    } finally {
      await DuckDBProvider.instance.dispose();
    }
  }
}
