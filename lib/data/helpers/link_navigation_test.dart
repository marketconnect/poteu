import 'duckdb_provider.dart';
import '../repositories/static_regulation_repository.dart';
import '../../domain/entities/chapter.dart';

/// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º
class LinkNavigationTest {
  static Future<void> testLinkNavigation() async {
    print('üîó Testing link navigation...');

    try {
      await DuckDBProvider.instance.initialize();
      final repository = StaticRegulationRepository();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤
      final chapterList = await repository.getChapterList(1);
      if (chapterList.length < 3) {
        print('‚ùå Need at least 3 chapters for testing');
        return;
      }

      print('üìö Testing with ${chapterList.length} chapters');

      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —Ä–∞–∑–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ ID
      await _testParagraphIdsUniqueness(repository, chapterList);

      // –¢–µ—Å—Ç 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ
      await _testLinkNavigationSimulation(repository, chapterList);

      print('‚úÖ Link navigation test completed!');
    } catch (e) {
      print('‚ùå Link navigation test failed: $e');
    } finally {
      await DuckDBProvider.instance.dispose();
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö
  static Future<void> _testParagraphIdsUniqueness(
      StaticRegulationRepository repository,
      List<ChapterInfo> chapterList) async {
    print('\nüîç Testing paragraph IDs uniqueness...');

    final Map<int, List<String>> chapterParagraphIds = {};

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–ª–∞–≤—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    for (int i = 0; i < 3 && i < chapterList.length; i++) {
      final chapterInfo = chapterList[i];
      final chapter = await repository.getChapterContent(chapterInfo.id);

      final paragraphIds = chapter.paragraphs
          .take(5) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
          .map((p) => '${p.id} (${p.num})')
          .toList();

      chapterParagraphIds[chapterInfo.orderNum] = paragraphIds;

      print('üìñ Chapter ${chapterInfo.orderNum}: ${paragraphIds.join(', ')}');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –º–µ–∂–¥—É –≥–ª–∞–≤–∞–º–∏
    final allIds = <String>[];
    for (final ids in chapterParagraphIds.values) {
      allIds.addAll(ids);
    }

    final uniqueIds = allIds.toSet();
    if (allIds.length == uniqueIds.length) {
      print('‚úÖ All paragraph IDs are unique across chapters');
    } else {
      print('‚ö†Ô∏è Found duplicate paragraph IDs across chapters');
      print('This could cause navigation issues!');
    }
  }

  /// –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ
  static Future<void> _testLinkNavigationSimulation(
      StaticRegulationRepository repository,
      List<ChapterInfo> chapterList) async {
    print('\nüéØ Testing link navigation simulation...');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Å—ã–ª–∫—É "1/2/1" (–¥–æ–∫—É–º–µ–Ω—Ç 1, –≥–ª–∞–≤–∞ 2, –ø–∞—Ä–∞–≥—Ä–∞—Ñ 1)
    final targetChapterNum = 2;
    final targetParagraphNum = 1;

    print('üîó Simulating link click: 1/$targetChapterNum/$targetParagraphNum');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–µ–≤—É—é –≥–ª–∞–≤—É
    final targetChapterInfo =
        chapterList.firstWhere((ch) => ch.orderNum == targetChapterNum);
    final targetChapter =
        await repository.getChapterContent(targetChapterInfo.id);

    print('üìñ Loaded target chapter: ${targetChapter.title}');

    // –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ —Ü–µ–ª–µ–≤–æ–π –≥–ª–∞–≤–µ
    final targetParagraph = targetChapter.paragraphs
        .where((p) => p.num == targetParagraphNum)
        .firstOrNull;

    if (targetParagraph != null) {
      print(
          '‚úÖ Found target paragraph: ${targetParagraph.num} in chapter $targetChapterNum');
      print(
          'üìù Paragraph content preview: ${targetParagraph.content.substring(0, 50)}...');
    } else {
      print(
          '‚ùå Target paragraph $targetParagraphNum not found in chapter $targetChapterNum');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö –≥–ª–∞–≤–∞—Ö
    print('\nüîç Checking for duplicate paragraph numbers...');
    for (int i = 0; i < 3 && i < chapterList.length; i++) {
      if (i + 1 == targetChapterNum) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–ª–µ–≤—É—é –≥–ª–∞–≤—É

      final chapterInfo = chapterList[i];
      final chapter = await repository.getChapterContent(chapterInfo.id);

      final duplicateParagraphs =
          chapter.paragraphs.where((p) => p.num == targetParagraphNum).toList();

      if (duplicateParagraphs.isNotEmpty) {
        print(
            '‚ö†Ô∏è Found duplicate paragraph $targetParagraphNum in chapter ${chapterInfo.orderNum}');
        print('This could cause navigation confusion!');
      } else {
        print(
            '‚úÖ No duplicate paragraph $targetParagraphNum in chapter ${chapterInfo.orderNum}');
      }
    }
  }

  /// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥–ª–∞–≤—É
  static Future<void> testNavigationAccuracy() async {
    print('\nüéØ Testing navigation accuracy...');

    try {
      await DuckDBProvider.instance.initialize();
      final repository = StaticRegulationRepository();

      final chapterList = await repository.getChapterList(1);
      if (chapterList.length < 3) {
        print('‚ùå Need at least 3 chapters for testing');
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—ã 1, 2, 3
      final chapters = <Chapter>[];
      for (int i = 0; i < 3; i++) {
        final chapterInfo = chapterList[i];
        final chapter = await repository.getChapterContent(chapterInfo.id);
        chapters.add(chapter);
        print('üìñ Loaded chapter ${chapterInfo.orderNum}: ${chapter.title}');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö
      for (int paragraphNum = 1; paragraphNum <= 3; paragraphNum++) {
        print('\nüîç Checking paragraph $paragraphNum across chapters...');

        for (int chapterIndex = 0;
            chapterIndex < chapters.length;
            chapterIndex++) {
          final chapter = chapters[chapterIndex];
          final chapterNum = chapterIndex + 1;

          final paragraph = chapter.paragraphs
              .where((p) => p.num == paragraphNum)
              .firstOrNull;

          if (paragraph != null) {
            print(
                '‚úÖ Paragraph $paragraphNum found in chapter $chapterNum (ID: ${paragraph.id})');
          } else {
            print('‚ùå Paragraph $paragraphNum not found in chapter $chapterNum');
          }
        }
      }
    } catch (e) {
      print('‚ùå Navigation accuracy test failed: $e');
    } finally {
      await DuckDBProvider.instance.dispose();
    }
  }
}
